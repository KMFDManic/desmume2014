ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
   platform = win
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   platform = osx
else ifneq ($(findstring win,$(shell uname -a)),)
   platform = win
endif
endif

TARGET_NAME := desmume

ifeq ($(platform), unix)
   TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC
   SHARED := -shared -Wl,--version-script=libretro/link.T
	DESMUME_JIT = 1
else ifeq ($(platform), osx)
   TARGET := $(TARGET_NAME)_libretro.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
	DESMUME_JIT = 1
else ifeq ($(platform), ios)
   TARGET := $(TARGET_NAME)_libretro_ios.dylib
   CC = clang -arch armv7 -isysroot $(IOSSDK) -miphoneos-version-min=5.0
   CXX = clang++ -arch armv7 -isysroot $(IOSSDK) -miphoneos-version-min=5.0
   CPPFLAGS = -DUSE_POSIX_MEMALIGN -D__RETRO_ARM__ -miphoneos-version-min=5.0
   fpic := -fPIC
   SHARED := -dynamiclib
   DESMUME_JIT_ARM = 1
else ifeq ($(platform), ps3)
   TARGET := $(TARGET_NAME)_libretro_ps3.a
   CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
   CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
   AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
   CPPFLAGS += -D__ppc__ -D__CELLOS_LV2__
   INCLUDE_ZLIB_HEADERS = 1
	STATIC_LINKING = 1
else ifeq ($(platform), sncps3)
   TARGET := $(TARGET_NAME)_libretro_ps3.a
   CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
   CXX = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
   AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe
   CPPFLAGS += -D__ppc__-D__CELLOS_LV2__
   INCLUDE_ZLIB_HEADERS = 1
	STATIC_LINKING = 1
else ifeq ($(platform), psl1ght)
   TARGET := $(TARGET_NAME)_libretro_psl1ght.a
   CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
   CXX = $(PS3DEV)/ppu/bin/ppu-g++$(EXE_EXT)
   AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
   CPPFLAGS += -D__ppc__ -D__CELLOS_LV2__
   INCLUDE_ZLIB_HEADERS = 1
	STATIC_LINKING = 1
else ifeq ($(platform), psp1)
   TARGET := $(TARGET_NAME)_libretro_psp1.a
   CC = psp-gcc$(EXE_EXT)
   CXX = psp-g++$(EXE_EXT)
   AR = psp-ar$(EXE_EXT)
   CPPFLAGS += -DPSP -G0
   INCLUDE_ZLIB_HEADERS = 1
	STATIC_LINKING = 1
else ifeq ($(platform), xenon)
   TARGET := $(TARGET_NAME)_libretro_xenon360.a
   CC = xenon-gcc$(EXE_EXT)
   CXX = xenon-g++$(EXE_EXT)
   AR = xenon-ar$(EXE_EXT)
   CPPFLAGS += -D__LIBXENON__ -m32 -D__ppc__
   INCLUDE_ZLIB_HEADERS = 1
	STATIC_LINKING = 1
else ifeq ($(platform), wii)
   TARGET := $(TARGET_NAME)_libretro_wii.a
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
   CFLAGS += -DGEKKO -mrvl -mcpu=750 -meabi -mhard-float -D__ppc__
   INCLUDE_ZLIB_HEADERS = 1
	STATIC_LINKING = 1
else ifeq ($(platform), android)
   TARGET := $(TARGET_NAME)_libretro_$(TARGET_NAME).so
   CC = arm-linux-androideabi-gcc$(EXE_EXT)
   CXX = arm-linux-androideabi-g++$(EXE_EXT)
   CPPFLAGS += -D__RETRO_ARM__
   fpic := -fPIC
   SHARED := -shared -Wl,--version-script=libretro/link.T
   DESMUME_JIT_ARM = 1

   ifeq ($(RETRO_PROFILE),1)
      LDFLAGS += -llog
   endif
else ifneq (,$(findstring armv,$(platform)))
   CPPFLAGS = -DUSE_POSIX_MEMALIGN -D__RETRO_ARM__
   TARGET := $(TARGET_NAME)_libretro.so
   SHARED := -shared -Wl,--version-script=libretro/link.T
   fpic := -fPIC
   CC = gcc
   DESMUME_JIT_ARM = 1
ifneq (,$(findstring cortexa8,$(platform)))
   CPPFLAGS += -marm -mcpu=cortex-a8
else ifneq (,$(findstring cortexa9,$(platform)))
   CPPFLAGS += -marm -mcpu=cortex-a9
endif
   CPPFLAGS += -marm
ifneq (,$(findstring neon,$(platform)))
   CPPFLAGS += -mfpu=neon
   HAVE_NEON = 1
endif
ifneq (,$(findstring softfloat,$(platform)))
   CPPFLAGS += -mfloat-abi=softfp
else ifneq (,$(findstring hardfloat,$(platform)))
   CPPFLAGS += -mfloat-abi=hard
endif
   CPPFLAGS += -DARM
else
   TARGET := $(TARGET_NAME)_libretro.dll
   CC = gcc
   CXX = g++
   SHARED := -shared -static-libgcc -static-libstdc++ -s -Wl,--version-script=libretro/link.T
	DESMUME_JIT = 1
endif

SOURCES = \
	armcpu.cpp \
	arm_instructions.cpp \
	bios.cpp cp15.cpp \
	common.cpp \
	debug.cpp \
	Disassembler.cpp \
	emufile.cpp FIFO.cpp \
	firmware.cpp GPU.cpp \
	mc.cpp \
	path.cpp \
	readwrite.cpp \
	wifi.cpp \
	MMU.cpp NDSSystem.cpp \
	ROMReader.cpp \
	render3D.cpp \
	rtc.cpp \
	saves.cpp \
	slot1.cpp \
	SPU.cpp \
	matrix.cpp \
	gfx3d.cpp \
	thumb_instructions.cpp \
	movie.cpp \
	utils/datetime.cpp \
    utils/guid.cpp \
	utils/emufat.cpp \
	utils/md5.cpp utils/xstring.cpp \
	utils/decrypt/crc.cpp utils/decrypt/decrypt.cpp \
	utils/decrypt/header.cpp \
	utils/task.cpp \
    utils/vfat.cpp \
	utils/dlditool.cpp \
	utils/libfat/cache.cpp \
	utils/libfat/directory.cpp \
	utils/libfat/disc.cpp \
	utils/libfat/fatdir.cpp \
	utils/libfat/fatfile.cpp \
	utils/libfat/filetime.cpp \
	utils/libfat/file_allocation_table.cpp \
	utils/libfat/libfat.cpp \
	utils/libfat/libfat_public_api.cpp \
	utils/libfat/lock.cpp \
	utils/libfat/partition.cpp \
	utils/tinyxml/tinystr.cpp \
	utils/tinyxml/tinyxml.cpp \
	utils/tinyxml/tinyxmlerror.cpp \
	utils/tinyxml/tinyxmlparser.cpp \
	addons.cpp \
	addons/slot2_mpcf.cpp addons/slot2_paddle.cpp addons/slot2_gbagame.cpp addons/slot2_none.cpp addons/slot2_rumblepak.cpp addons/slot2_guitarGrip.cpp addons/slot2_expMemory.cpp addons/slot2_piano.cpp addons/slot1_none.cpp addons/slot1_r4.cpp addons/slot1_retail.cpp addons/slot1_retail_nand.cpp \
	cheatSystem.cpp \
	texcache.cpp rasterize.cpp \
	metaspu/metaspu.cpp \
	version.cpp \
	mic.cpp \
	GPU_osd_stub.cpp \
	driver.cpp \
	fs-linux.cpp

ifeq ($(DESMUME_JIT_ARM),1)
SOURCES += \
   ../arm_arm/arm_gen.cpp \
   ../arm_arm/arm_jit.cpp
CPPFLAGS += -DHAVE_JIT
endif

ifeq ($(DESMUME_JIT),1)
SOURCES += \
	arm_jit.cpp \
   utils/AsmJit/core/assembler.cpp \
   utils/AsmJit/core/assert.cpp \
   utils/AsmJit/core/buffer.cpp \
   utils/AsmJit/core/compiler.cpp \
   utils/AsmJit/core/compilercontext.cpp \
   utils/AsmJit/core/compilerfunc.cpp \
   utils/AsmJit/core/compileritem.cpp \
   utils/AsmJit/core/context.cpp \
   utils/AsmJit/core/cpuinfo.cpp \
   utils/AsmJit/core/defs.cpp \
   utils/AsmJit/core/func.cpp \
   utils/AsmJit/core/logger.cpp \
   utils/AsmJit/core/memorymanager.cpp \
   utils/AsmJit/core/memorymarker.cpp \
   utils/AsmJit/core/operand.cpp \
   utils/AsmJit/core/stringbuilder.cpp \
   utils/AsmJit/core/stringutil.cpp \
   utils/AsmJit/core/virtualmemory.cpp \
   utils/AsmJit/core/zonememory.cpp \
   utils/AsmJit/x86/x86assembler.cpp \
   utils/AsmJit/x86/x86compiler.cpp \
   utils/AsmJit/x86/x86compilercontext.cpp \
   utils/AsmJit/x86/x86compilerfunc.cpp \
   utils/AsmJit/x86/x86compileritem.cpp \
   utils/AsmJit/x86/x86cpuinfo.cpp \
   utils/AsmJit/x86/x86defs.cpp \
   utils/AsmJit/x86/x86func.cpp \
   utils/AsmJit/x86/x86operand.cpp \
   utils/AsmJit/x86/x86util.cpp
CPPFLAGS += -DHAVE_JIT
endif

DEBUG=0
ifeq ($(DEBUG), 1)
   CPPFLAGS += -g
   OPTIMIZE = -O0
else
   CPPFLAGS += -DNDEBUG
   OPTIMIZE = -O3
endif

ifeq ($(RETRO_PROFILE),1)
   CPPFLAGS += -DRETRO_PROFILE=1
endif

CPPFLAGS += $(OPTIMIZE)

CPPFLAGS += -DHAVE_LIBZ
ifeq ($(INCLUDE_ZLIB_HEADERS),1)
   CPPFLAGS += -Ilibretro/zlib
endif

SOURCES2   = $(foreach src,$(SOURCES),src/$(src)) libretro/libretro.cpp

OBJECTS    = $(SOURCES2:.cpp=.o) src/utils/ConvertUTF.o libretro/performance.o
LIBS       = -lz
CFLAGS     += -std=gnu99
CPPFLAGS   += -D__LIBRETRO__ $(fpic) -iquote src -iquote libretro 

all: $(TARGET)

$(TARGET): $(OBJECTS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJECTS)
else
	$(CXX) $(LDFLAGS) $(fpic) $(SHARED) -o $@ $(OBJECTS) $(LIBS)
endif

clean:
	rm -f $(OBJECTS) $(TARGET)

.PHONY: clean



